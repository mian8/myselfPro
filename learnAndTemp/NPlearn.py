#coding=utf8

import numpy as np
import matplotlib.pyplot as plt
import random,time

'''
#整型生成器,格式与range一致
myArr=np.arange(2,10,2)
print(myArr)
#正态分布的随机数据生成器
data=np.random.randn(4,5)*10
print(data)
print(data*10)
#表示数组维度大小的元祖
print(data.shape)
#说明数组数据类型的对象
print(data.dtype)
#数组的维度（类似于嵌套层数)
print(data.ndim)
#将序列性对象转化为数组，嵌套转化为多维数组
mylist=[list(range(1000001,1000020,3)),list(range(1,20,3))]
arr1=np.array(mylist)
#生成全是0或全是1的数组
print(np.zeros((4,2)))
print(np.ones((5,4,3)))
#生成空数组，仅分配空间，可能会打印出垃圾值
junk=np.empty(2,3)
junk[0][1]=888
#创建等值数组,前为结构，后为填充值
justWe=np.full((2,3,4),2)
#创建N*N正方形矩阵
np.eye(4)
#改变数组的数据类型,
arr2=np.array([1,2,3],dtype=np.int32)
new=arr2.astype(np.float64)
'''
'''
#四则运算
arr1=np.array([[1,2,3,4],[0,9,8,7]])
print(arr1*3-arr1*0.1)
print(arr1**0.5)
print(arr1<arr1*1.5)
'''

"""
#索引与切片,即使赋值也只是进行引用，可以改变原数组
ak=np.arange(1,10,2)
ck=ak[1:3]
ck[:]=88
bk=ak[1:3].copy()
bk[:]=77
print(ak,bk,ck)
arr2d=np.array([np.eye(5),np.ones((5,5))])
arr2d[1,2,2]=88
print(arr2d)
print(arr2d[0,3])
print(arr2d[1,:3,2:])
"""
'''
#布尔型索引及运算
names=np.array(["李铁头","诸葛山珍","张伟","布林","萧十一郎","飞鸿若鱼","鲜橙多"])
data=np.random.randn(7,4)
print(data)
print(names=="张伟")
#布尔类型运算时数组长度需要一致
print(data[~(names!="张伟"),:2])
#~反转条件，&和,|或
print(data[(names=="诸葛山珍")|(names=="萧十一郎")])
print(data[data<0])
data[data<0]=0
print(data)
'''
'''
#花式索引
num=5
arr=np.empty((num,4))
for i in range(num):
    arr[i]=num-i
print(arr)
print(arr[2:5])
print(arr[[2,-4,3]])
print("&"*20)
#reshape根据数组元素，生成新的数组
news=np.arange(45).reshape(5,9)
print(news)
print(news[[1,3,2],[2,3,4]])
print(news[[1,3,2]][:,[2,3,4]])
'''

'''
#数组转置与轴对换
new=np.arange(24).reshape(2,3,4)
print(new)
print(new.T)
#计算矩阵内积
#print(np.dot(new,new.T))
#轴依次为0,1,2，改变排序则按照顺序置换
new2=new.transpose((1,0,2))
print(new2)
print(new.swapaxes(0,1))
'''

"""
#通用函数
x=np.random.randn(8)
y=np.random.randn(8)
z=np.empty((8),dtype=float)
#开方
print( np.sqrt(x))
#指数，第二个参数为out，直接对z赋值
print( np.exp(y,z))
#x,y中元素级别最大的元素
print(np.maximum(x,y))
#拆分整数和小数
rem,whole=np.modf(x*5)
print(rem)
print(whole)

"""
"""
#利用数组数据处理
points=np.arange(-5,5,0.01)
#将两个一维数组网格化
xs,ys=np.meshgrid(points,points)
print(ys)
print(xs)
z=np.sqrt(xs**2+ys**2)
"""

"""
#条件逻辑表述为数组运算
xarr=np.array([1.1,1.2,1.3,1.4,1.5])
yarr=np.array([2.1,2.2,2.3,2.4,2.5])
cond=np.array([True,False,True,True,False])
#where可以根据条件取第二个或第三个参数的值，可以是数组和标量
result=np.where(cond,xarr,7)
print(result)
arr=np.random.randn(4,4)
#where仅替换大于0的值
end=np.where(arr>0,2,arr)
print(end)
"""

'''
#数学和统计方法
arr=np.random.randn(4,5)
print(arr)
#mean平均值，sum求和，axis参数0为列1为行
print(arr.mean())
print(np.mean(arr))
print(arr.sum(axis=1))
print(arr.mean(axis=1))
print(np.sum(arr,axis=1))
print(np.mean(arr,axis=1))
#cumsum累加，cumprod累乘，返回同样大小的数组
arr2=np.arange(8)
print(arr2.cumsum())
print(arr.cumsum())
print(arr.cumsum(axis=0))
print(arr.cumsum(axis=1))
print(arr.cumprod(axis=1))
'''
"""
#布尔数组
arr=np.random.randn(50)
print((arr>0).sum())
#any数组中包含True或非零数值，则返回True
print(arr.any())
#all数组中包含0或者False，则返回False
print(arr.all())
"""

"""
#排序
arr=np.random.randn(4,5)
arr.sort()
print(arr)
arr.sort(axis=0)
print(arr)
"""
"""
#唯一性
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print(np.unique(names))
nameq = np.array(['Bob', 'Jack', 'Will', 'Bob', 'William', 'joe', 'Joe'])
print(np.in1d(nameq,np.unique(names)))

"""

"""
#numpy数组保存save，savez，savez_compressed
arr1=np.arange(10,100,3)
arr2=np.random.randn(4,5)
np.savez("tempfile",a=arr1,b=arr2)
#numpy数组读取
qc=np.load("tempfile.npz")
print(qc["b"])
"""
"""
#线性代数
x=np.array([[1.,2.,3.],[4.,5.,6.]])
y=np.array([[6.,23.],[-1,7],[8.,9.]])
#dot矩阵乘法@同效
print(x.dot(y))
print(np.dot(x,y))
print(x @ y)
"""
"""
#伪随机数生成
qc=np.random.normal(size=(4,4))
#设置隔离的随机数种子
rng=np.random.RandomState(1234)
print(rng.normal(size=(4,4)))
print(qc)
"""

#随机漫步
nsteps=1000
draws=np.random.randint(0,2,size=nsteps)
#三元表达式
steps=np.where(draws>0,1,-1)
#cumsum不聚合累加
walk=steps.cumsum()
print(walk)
print(walk.min())
print(walk.max())